NAMES

mushin
mizu
mind like water
miliwa
mlw

COMMANDS

from yagtd:
 - general
   - lists
     - contexts
     - deadlines
     - la/listall
     - list/ls
     - listpri/sort
     - listref/lr
     - order
     - overdue
     - search
     - searchall
     - status/summary
   - manipulate
     - add
     - archive (archives completed tasks)
     - load
     - print (outputs .rst file)
     - save

 - on a task (id as first arg)
   - flags
     - waitingfor
     - maybe/someday
   - set properties
     - complete
     - due # date (wrong in yagtd help, # is missing)
     - end # date (same bug)
     - importance
     - recurrence
     - start (same bug) 
     - time
     - urgency
   - manipulate
     - append
     - modify (diff with append not clear)
     - close/done
     - del/rm
     - edit
     - extend/notes (adds to title, not description)
     - ref
   - replace/sub
   - show

 
INSTALL

couchdb part:

  - for normal couchdb:

    couchapp push couchdb mushin http://thomas:pass@localhost:5984/mushin/

    where:
      - couchdb is the local directory containing the code
      - mushin is the design document name in the database
      - url is the url to mushin on couchdb

    (with newer couchapp)

    couchapp push --docid _design/mushin couchdb http://thomas:pass@localhost:5984/mushin/

  - for hoodie:

    couchapp push --docid _design/mushin couchdb http://admin:$PASSWORD@localhost:6006/user%2Fxbnjwxg/


QUESTIONS

 - where to store .js code that you want to use both server-side and
   client-side ? For example, date.js and its setRFC3339 function.
   e.g. http://localhost:5984/mushin/_design/mushin/jquery.mushin.js
   is stored at couchdb/_attachments/jquery.mushin.js
   e.g. http://localhost:5984/mushin/_design/mushin/vendor/couchapp/jquery.couchapp.js
   is stored at couchdb/vendor/couchapp/_attachments/jquery.couchapp.js
   For now, we created a symlink

maemo
=====

program flow
------------
bin/mushin-maemo
  calls mushin.maemo.main.main
    creates mushin.maemo.start.StartWindow()
      uses mushin.common.app.Server object

error handling
--------------
- queryView can get a 404 errback; how to handle this ?

command line testing
--------------------

as interpreter:
  search U:5
  edit ...
  help

as command

flow of command handling
------------------------
	Main program
		gtd calls main.main
		does not know about reactors or deferreds
		does not know whether there are subcommands or not
		exits with the return value from main.main
	main.main
		instantiates the root GTD command
		invokes c.parse(argv)
		does not know about reactors or deferreds
		does not know whether there are subcommands or not
		returns
			the return value from c.parse if ok
			255 if exception
	GTD.parse
		parses the args
		dispatches to subcommand's parse if there are args
		or dispatches to do if there aren't

SECURITY
--------
- leave admin party mode; create admin user
- set up paisleycmd
- add user
  paisley user add thomas
- limit your mushin database to that user
  paisley -D mushin -A admin security add thomas
- set that user as an admin too
  paisley -D mushin -A admin security add -p admin thomas

HOODIE
------
To run against a local hood.ie+couchdb:
	- GTD_DEBUG=5 bin/gtd -P 6006 -D user/xbnjwxg -u user/thomas@apestaart.org search U:5

To run against a local couchdb replicating from a remote hood.ie+couchdb:
	- make sure your local couchdb db is named user/... so mushin can
          now it's hoodie-like to generate the proper id's
	- if no local authentication:
          GTD_DEBUG=5 bin/gtd -P 5984 -D user/xbnjwxg search U:5
        - if same authentication is set up:
          GTD_DEBUG=5 bin/gtd -P 5984 -D user/xbnjwxg -u user/thomas@apestaart.org search U:5
